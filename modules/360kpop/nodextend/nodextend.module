<?php


/**
 * @todo Dinh nghia node::type product
 *
 */
function nodextend_node_info() {
    return array(
        'product' => array(
            'name' => 'Product',
            'module' => 'nodextend',
            'description' => t('Kiểu dữ liệu <em>Product</em> cho phép tạo các sản phẩm thuộc các loại <em>Album, Mỹ phẩm, Phụ kiện ...</em>, mỗi loại sản phẩm có những thuộc tính khác nhau, thể hiện đầy đủ dữ liệu của mỗi loại sản phẩm.'),
            'help' => '',
            'has_title' => TRUE,
            'title_label' => 'Title',
            'has_body' => TRUE,
            'body_label' => 'Body',
            'min_word_count' => '',
            'locked' => '',
        ),
    );
}

/**
 * Implementation of hook_form().
 */
function nodextend_form(&$node, $form_state) {
    // Check if ref exist
    $ref = router::getString('destination');
    
    if($ref) {
        session::set('product_ref', $ref);
    }
    
    // The site admin can decide if this node type has a title and body, and how
    // the fields should be labeled. We need to load these settings so we can
    // build the node form correctly.
    $type = node_get_types('type', $node);

    // Them cac kieu node tren thanh tab second
    
    // Lay danh sach cac kieu san pham
    $list = product::getProductTypes('type,name');
    
    // Lay phan tu dau tien cua danh sach de lam phan tu mac dinh
    $first = current($list);
    
    // Kieu san pham hien tai dang tao
    $current = arg(3) ? arg(3) : session::get('product_default_type', $first ? $first->type : '');

    // Them danh sach cac kieu san pham len tren second tabs
    $markup = '<ul class="tabs secondary" style="margin-top:15px;">';

    foreach ($list as $slug => $item) {
        $class = ($slug == $current) ? ' class="active"' : '';
        $markup .= '<li' . $class . '><a href="' . url('node/add/product/' . $slug) . '">' . $item->name . '</a></li>';
    }

    $markup .= '</ul>';

    $form['box'] = array(
        '#type' => 'markup',
        '#prefix' => '<div id="box">',
        '#suffix' => '</div>',
        '#value' => $markup,
        '#weight' => -10,
    );

    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($type->title_label),
        '#required' => TRUE,
        '#default_value' => $node->title,
        '#weight' => -4,
    );

    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
    
    // TODO : Add metadata
    $form['basic'] = array(
        '#type' => 'fieldset',
        '#title' => t('Dữ liệu cơ bản của sản phẩm'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE, // Open or Close
        '#tree' => TRUE,
        '#weight' => 1.1,
        '#attributes' => array('class' => 'node-item-form'),
    );

    $form['basic']['saleoff'] = array(
        '#type' => 'checkbox',
        '#title' => t('Bán giảm giá'),
        '#default_value' => isset($node->saleoff) ? $node->saleoff : 0,
        '#description' => t('Sản phẩm được bán giảm giá <strong>Bật/Tắt</strong> ...'),
    );
    
    $form['basic']['special'] = array(
        '#type' => 'checkbox',
        '#title' => t('Sản phẩm đặc biệt'),
        '#default_value' => isset($node->special) ? $node->special : 0,
        '#description' => t('Bản phẩm đặc biệt dùng trong đợt khuyến mại <strong>Bật/Tắt</strong> ...'),
    );
    
    $form['basic']['sku'] = array(
        '#type' => 'textfield',
        '#title' => t('SKU'),
        '#default_value' => isset($node->sku) ? $node->sku : '',
        '#description' => t('Mã số sản phẩm, dùng phân biệt các loại sản phẩm với nhau. %example', array('%example' => 'Ví dụ: AL123A, MP45C ...')),
    );
    
    $form['basic']['guid'] = array(
        '#type' => 'textfield',
        '#title' => t('Reference'),
        '#default_value' => isset($node->guid) ? $node->guid : '',
        '#description' => t('Thông tin sản phẩm từ nhà sản xuất hoặc một nguồn nào đó. %example', array('%example' => 'Ví dụ: http://tiki.vn/google-nexus-7.html')),
    );
    
    $form['basic']['price'] = array(
        '#type' => 'textfield',
        '#title' => t('Giá'),
        '#default_value' => isset($node->price) ? $node->price : 0,
        '#description' => t('Giá treo sản phẩm trên shop, đối với sản phẩm giảm giá, giá shop là giá chưa được giảm. %example', array('%example' => 'Ví dụ: 150.000 Đ ...')),
    );

    $form['basic']['sell'] = array(
        '#type' => 'textfield',
        '#title' => t('Giá bán ra'),
        '#default_value' => isset($node->sell) ? $node->sell : 0,
        '#description' => t('Giá bán ra, giá bán sản phẩm cho khách, nếu không nhập sẽ có giá trị bằng <strong>Giá</strong>. %example', array('%example' => 'Ví dụ: 140.000 Đ ...')),
    );

    $form['basic']['cost'] = array(
        '#type' => 'textfield',
        '#title' => t('Giá mua vào'),
        '#default_value' => isset($node->cost) ? $node->cost : 0,
        '#description' => t('Giá mua vào, chi phí thực tế của sản phẩm. %example', array('%example' => 'Ví dụ: 110.000 Đ ...')),
    );
    
    $form['basic']['weight'] = array(
        '#type' => 'textfield',
        '#title' => t('Trọng lượng'),
        '#default_value' => isset($node->weight) ? $node->weight : 0,
        '#description' => t('Trọng lượng sản phẩm, sử dụng để tính cước vận chuyển sản phẩm. %example', array('%example' => 'Ví dụ: 150g ...')),
    );
    
    $form['basic']['amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Số lượng'),
        '#default_value' => isset($node->amount) ? $node->amount : 1,
        '#description' => t('Số lượng sản phẩm còn trong kho. %example', array('%example' => 'Ví dụ: 100')),
    );
    
    $form['basic']['unit'] = array(
        '#type' => 'textfield',
        '#title' => t('Đơn vị'),
        '#default_value' => isset($node->unit) ? $node->unit : '',
        '#description' => t('Đơn vị tính của sản phẩm. %example', array('%example' => 'Ví dụ: cái, chiếc, kg ...')),
    );
    
    $form['basic']['publish'] = array(
        '#type' => 'textfield',
        '#title' => t('Publish product'),
        '#default_value' => isset($node->publish) ? date('H:i:j d-m-Y',$node->publish) : date('H:i:j d-m-Y'),
        '#description' => t('Thời gian công khai sản phẩm, đăng sản phẩm lên shop, mặc định là thời điểm tạo sản phẩm. %example', array('%example' => 'Ví dụ: 09:30:00 20-11-2012')),
    );
    
    $form['basic']['unpublish'] = array(
        '#type' => 'textfield',
        '#title' => t('UnPublish product'),
        '#default_value' => isset($node->unpublish) ? date('H:i:j d-m-Y',$node->unpublish) : '',
        '#description' => t('Là thời gian gỡ sản phẩm khỏi shop, người dùng sẽ không xem được thông tin sản phẩm. %example', array('%example' => 'Ví dụ: 09:30:00 20-11-2013')),
    );
    
    $form['basic']['startdate'] = array(
        '#type' => 'textfield',
        '#title' => t('Thời gian bắt đầu bán giảm giá'),
        '#default_value' => isset($node->startdate) ? date('H:i:j d-m-Y',$node->startdate) : '',
        '#description' => t('Thời gian công khai bài viết, mặc định là thời điểm tạo bài viết. %example', array('%example' => 'Ví dụ: 09:30:00 20-11-2012')),
    );
    
    $form['basic']['enddate'] = array(
        '#type' => 'textfield',
        '#title' => t('Thời gian kết thúc bán giảm giá'),
        '#default_value' => isset($node->enddate) ? date('H:i:j d-m-Y',$node->enddate) : '',
        '#description' => t('Thời gian công khai bài viết, mặc định là thời điểm tạo bài viết. %example', array('%example' => 'Ví dụ: 09:30:00 20-11-2012')),
    );
    
    // TODO : Add product ship fieldset
    $form['ship'] = array(
        '#type' => 'fieldset',
        '#title' => t('Vận chuyển sản phẩm'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE,
        '#weight' => 1.3,
        '#attributes' => array('class' => 'node-item-form'),
    );
    
    $form['ship']['shipable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Vận chuyển'),
        '#default_value' => isset($node->shipable) ? $node->shipable : 1,
        '#description' => t('Sản phẩm có thể vận chuyển đến tận nơi <strong>Bật/Tắt</strong> ...'),
    );

    $form['ship']['shiptime'] = array(
        '#type' => 'select',
        '#title' => t('Thời gian vận chuyển'),
        '#default_value' => isset($node->shiptime) ? $node->shiptime : '1 week',
        '#options' => array(
            '' => 'Use Global',
            '1-3 days' => 'Từ 1-3 ngày',
            '3-5 days' => 'Từ 3-5 ngày',
            '5-7 days' => 'Từ 5-7 ngày',
            '1 week' => 'Khoảng 1 tuần',
            '1-2 weeks' => 'Từ 1-2 tuần',
        ),
        '#description' => t('Thời gian cần thiết để vận chuyển sản phẩm tới khách hàng. %example', array('%example' => 'Ví dụ: 150g ...')),
    );
    
    $form['ship']['shipmethod'] = array(
        '#type' => 'select',
        '#title' => t('Hình thức vận chuyển'),
        '#default_value' => isset($node->shipmethod) ? $node->shipmethod : 'Gửi qua đường Bưu điện',
        '#options' => array(
            '' => 'Use Global',
            'Gửi qua đường Bưu điện' => 'Gửi qua đường Bưu điện',
            'Chuyển phát nhanh tín thành' => 'Chuyển phát nhanh tín thành',
            'Chuyển phát nhanh Viettel' => 'Chuyển phát nhanh Viettel',
            'Chuyển phát nhanh Bưu điện' => 'Chuyển phát nhanh Bưu điện',
            'Chuyển phát nhanh 24h' => 'Chuyển phát nhanh 24h',
        ),
        '#description' => t('Phương thức vận chuyển sản phẩm nếu có. %example', array('%example' => 'Ví dụ: chuyển phát nhanh, chuyển phát qua bưu điện ...')),
    );
    
    $form['ship']['shipprice'] = array(
        '#type' => 'textfield',
        '#title' => t('Phí vận chuyển'),
        '#default_value' => isset($node->shipprice) ? $node->shipprice : '50000',
        '#description' => t('Phí vận chuyển được tính dựa vào trọng lượng sản phẩm. %example', array('%example' => 'Ví dụ: 50.000 VNĐ.')),
    );
    
    $form['ship']['shipweight'] = array(
        '#type' => 'textfield',
        '#title' => t('Trọng lượng vận chuyển'),
        '#default_value' => isset($node->shipweight) ? $node->shipweight : '',
        '#description' => t('Trọng lượng vận chuyển, là trọng lượng sử dụng để tính cước vận chuyển sản phẩm. %example', array('%example' => 'Ví dụ: 150g ...')),
    );
    
    // TODO : Thong tin mo rong cua tung loai san pham
    
    // TODO : Step 1 - Load product type fields option
    
    $productType = $list[$current];
    
    // TODO : Step 2 - Load product type fields
    $fields = product::getProductTypeFields($current);

    if(count($fields) > 0) {
        // TODO : Step 3 - Add product type fields to form
        $form['extra'] = array(
            '#type' => 'fieldset',
            '#title' => t('Dữ liệu mở rộng của ' . $productType->name),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#tree' => TRUE,
            '#weight' => 1.2,
            '#attributes' => array('class' => 'node-item-form'),
        );
        foreach ($fields as $key => $value) {
            $form['extra'][$key] = array(
                '#type' => $value->fieldtype,
                '#title' => $value->title,
                '#weight' => $value->weight,
                '#description' => $value->description,
            );
        }
    }

    // TODO : Store some need variable
    $form['class'] = array(
        '#type' => 'hidden',
        '#default_value' => $current,
    );

    return $form;
}

/**
 * @todo Them cac truong nhap lieu vao node form
 */
function nodextend_form_alter(&$form, $form_state, $form_id) {
    if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
        // Thay đổi nhập liệu node form
        $node = &$form['#node']; 
        // Thay doi metadata
        $node->metadata = unserialize($node->metadata);
        // Loai bo filter element
        // unset($form['body_field']['format']);
        // Loai bo menu
        // unset($form['menu']);
   
        // Fix menu weight
        $form['title']['#weight'] = -6;
        $form['menu']['#weight'] = 0;
        // TODO : Add alias textfield
        $form['alias'] = array(
            '#type' => 'textfield',
            '#title' => t('Alias'),
            '#description' => t('Tên định danh, dùng tạo URL cho bài viết, được tạo tự động nếu không nhập. %example.', array('%example' => 'Ví dụ: san-pham-noi-bat-trong-thang')),
            '#default_value' => isset($node->alias) ? $node->alias : '',
            '#weight' => -4.5
        );

        // TODO : Add image field
        $form['image'] = array(
            '#type' => 'textfield',
            '#title' => t('Featured Image'),
            '#default_value' => isset($node->image) ? $node->image : '',
            '#description' => t('Ảnh đại diện bài viết. %example', array('%example' => 'Ví dụ: http://img.360kpop.com/2012/07/boa.jpg')),
            '#weight' => -3
        );
        
        // TODO : Add tag field autocomplete
        $form['tags'] = array(
            '#type' => 'textfield',
            '#title' => t('Tags'),
            '#default_value' => isset($node->tags) ? $node->tags : '',
            '#description' => t('Tag được dùng để liên kết các bài viết cùng nội dung. %example', array('%example' => 'Ví dụ: Junio, BoA ...')),
            '#autocomplete_path' => 'tags/autocomplete',
            '#maxlength' => 1024,
            '#weight' => 1
        );

        // TODO : Add metadata
        $form['meta'] = array(
            '#type' => 'fieldset',
            '#title' => t('Meta data'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#tree' => TRUE,
            '#weight' => 2,
            '#attributes' => array('class' => 'node-item-form'),
        );
        $form['meta']['desc'] = array(
            '#type' => 'textarea',
            '#title' => t('Meta description'),
            '#default_value' => isset($node->metadesc) ? $node->metadesc : '',
            '#rows' => 1,
            '#description' => t('Miêu tả ngắn gọn nội dung bài viết, được tạo tự động nếu không nhập. %example', array('%example' => 'Ví dụ: Phân loại danh mục sản phẩm, phân loại danh mục tin tức ...')),
        );

        $form['meta']['keywords'] = array(
            '#type' => 'textarea',
            '#title' => t('Meta keywords'),
            '#default_value' => isset($node->metakey) ? $node->metakey : '',
            '#rows' => 1,
            '#description' => t('Từ khóa hỗ trợ máy tìm kiếm, được tạo tự động nếu không nhập. %example', array('%example' => 'Ví dụ: Phân loại danh mục sản phẩm, phân loại danh mục tin tức ...')),
        );

        $form['meta']['author'] = array(
            '#type' => 'textfield',
            '#title' => t('Meta author'),
            '#default_value' => isset($node->metadata->author) ? $node->metadata->author : '360kpop.com',
            '#description' => t('Tác giả của bài viết. %example', array('%example' => 'Ví dụ: Admin, Bom ...')),
        );

        $form['meta']['robots'] = array(
            '#type' => 'select',
            '#title' => t('Meta robots'),
            '#default_value' => isset($node->metadata->robots) ? $node->metadata->robots : '',
            '#options' => array(
                '' => 'Use Global',
                'index, follow' => 'Index, Follow',
                'noindex, follow' => 'No index, follow',
                'index, nofollow' => 'Index, No follow',
                'noindex, nofollow' => 'No index, no follow',
            ),
            '#description' => t('Chỉ định chế độ robots tìm kiếm. %example.', array('%example' => 'Ví dụ: Index, Follow')),
            '#attributes' => array('class' => 'menu-title-select'),
        );
        
        $form['buttons']['submit']['#submit'] = array('nodextend_form_submit');

        $form['buttons']['close'] = array(
            '#type' => 'submit',
            '#value' => 'Save & Close',
            '#submit' => array('nodextend_form_submit'),
            '#weight' => 6,
        );

        $form['buttons']['new'] = array(
            '#type' => 'submit',
            '#value' => 'Save & New',
            '#submit' => array('nodextend_form_submit'),
            '#weight' => 7,
        );

        $form['buttons']['cancel'] = array(
            '#type' => 'submit',
            '#value' => 'Cancel',
            '#validate' => array('nodextend_form_cancel'),
            '#weight' => 30,
        );
    }
}

function nodextend_form_submit($form, &$form_state) {
    global $user;

    $node = node_form_submit_build_node($form, $form_state);
    $insert = empty($node->nid);
    node_save($node);
    $node_link = l(t('view'), 'node/' . $node->nid);
    $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
    $t_args = array('@type' => node_get_types('name', $node), '%title' => $node->title);

    if ($insert) {
        watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
        drupal_set_message(t('@type %title has been created.', $t_args));
    } else {
        watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
        drupal_set_message(t('@type %title has been updated.', $t_args));
    }
    if ($node->nid) {
        unset($form_state['rebuild']);
        $form_state['nid'] = $node->nid;
        $form_state['redirect'] = 'node/' . $node->nid;
    } else {
        // In the unlikely case something went wrong on save, the node will be
        // rebuilt and node form redisplayed the same way as in preview.
        drupal_set_message(t('The post could not be saved.'), 'error');
    }
    
    // Add extract code for redirect
    $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';
    $cid = isset($form_state['values']['cid']) ? $form_state['values']['cid'] : NULL;
    $type = isset($form_state['values']['type']) ? $form_state['values']['type'] : '';
    $class = isset($form_state['values']['class']) ? $form_state['values']['class'] : NULL;
    
    if ($op == t('Save')) {
        // set variable for next add category
        session::set('category_default_' . $type, $cid);
        if($class) {
            session::set('product_default_type', $class);
        }
        // set form state is rebuild category
        $form_state['rebuild'] = TRUE;
    } else 
    if ($op == t('Save & New')) {
        // set variable for next add category
        session::set('category_default_' . $type, $cid);
        if($class) {
            session::set('product_default_type', $class);
        }
        // set redirect path
        $form_state['redirect'] = 'node/add/' . $type;
    } else {
        // delete variable
        session::del('product_default_type');
        session::del('category_default_' . $type);
        // redirect to next page
        $ref = session::get('product_ref', router::getString('destination', 'admin/content/node'));
        
        $form_state['redirect'] = $ref;
    }
}
/**
 * @todo Form cancel event
 */
function nodextend_form_cancel($form, &$form_state) {
    $type = trim($form_state['values']['type']);
   
    // clear message
    drupal_get_messages('error');
    
    $ref = session::get('product_ref', router::getString('destination', 'admin/content/node'));
    
    // clear registry variable
    session::del('product_ref');
    session::del('product_default_type');
    session::del('category_default_' . $type);

    drupal_goto($ref);
}
/**
 * Implementation of hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
function nodextend_validate($node, &$form) {
    /**
     * @todo Kiem tra du lieu nhap vao
     */
        
    $basic = (Object) $node->basic;
    $ship = (Object) $node->ship;

    if (!is_numeric ($basic->price)) {
        form_set_error('basic][price', t('Giá sản phẩm phải là số.'));
    }
    if (!is_numeric ($basic->cost)) {
        form_set_error('basic][cost', t('Giá mua vào phải là số.'));
    }
    if (!is_numeric ($basic->sell)) {
        form_set_error('basic][sell', t('Giá bán ra phải là số.'));
    }
    if (!is_numeric ($basic->weight)) {
        form_set_error('basic][weight', t('Trọng lượng sản phẩm phải là số.'));
    }
    if (!is_numeric ($basic->amount)) {
        form_set_error('basic][amount', t('Số lượng sản phẩm phải là số.'));
    }
    if (!is_numeric ($ship->shipprice)) {
        form_set_error('ship][shipprice', t('Phí vận chuyển phải là số.'));
    }
}

/**
 * Implementation of hook_insert().
 */
function nodextend_insert($node) {
    // TODO: Process and Insert Tag to {data}

    // TODO: Insert data to {products}
    $product = new stdClass();
    $product->nid = $node->nid;
    $product->vid = $node->vid;
    $product->uid = $node->uid;
    $product->cid = $node->cid;
    $product->sku = $node->basic['sku'];
    $product->saleoff = $node->basic['saleoff'];
    $product->special = $node->basic['special'];
    $product->class = $node->class;
    $product->price = $node->basic['price'];
    $product->sell = empty($node->basic['sell']) ? $product->price : $node->basic['sell'];
    $product->cost = $node->basic['cost'];
    $product->guid = $node->basic['guid'];
    $product->image = $node->image;
    $product->weight = $node->basic['weight'];
    $product->amount = $node->basic['amount'];
    $product->unit = $node->basic['unit'];
    $product->publish = $node->basic['publish'] ? strtotime("{$node->basic['publish']}") : 0;
    $product->unpublish = $node->basic['unpublish'] ? strtotime("{$node->basic['unpublish']}") : 0;
    $product->startdate = $node->basic['startdate'] ? strtotime("{$node->basic['startdate']}") : 0;
    $product->enddate = $node->basic['enddate'] ? strtotime("{$node->basic['enddate']}") : 0;
    $product->shipable = $node->ship['shipable'];
    $product->shiptime = $node->ship['shiptime'];
    $product->shipweight = $node->ship['shipweight'];
    $product->shipprice = $node->ship['shipprice'];
    $product->shipmethod = $node->ship['shipmethod'];
    
    data::insertObject('{products}', $product);

    // TODO: Insert data to {product_field_data}
    $fields    = isset($node->extra) ? $node->extra : array();
    $fieldList = product::getProductTypeFields($node->type);
    
    foreach($fields as $key => $value) {
        $currentField = isset($fieldList[$key]) ? $fieldList[$key] : NULL;

        if(NULL == $currentField) {
            continue;
        }

        // Insert new field to database
        $field = new stdClass();
        $field->nid = $node->nid;
        $field->vid = $node->vid;
        $field->datatype = $currentField->datatype;
        $field->name = $key;
        $field->data = $value;

        data::insertObject('{product_field_data}', $field);
    }

    //trace($node); die();
}

/**
 * Implementation of hook_update().
 */
function nodextend_update($node) {
    //trace($node);
    // if this is a new node or we're adding a new revision,
    if ($node->revision) {
        nodextend_insert($node);
    } else {
        // TODO: Update {product}
        $product = new stdClass();
        $product->vid = $node->vid;
        $product->cid = $node->cid;
        $product->sku = $node->basic['sku'];
        $product->saleoff = $node->basic['saleoff'];
        $product->special = $node->basic['special'];
        $product->class = $node->class;
        $product->price = $node->basic['price'];
        $product->sell = empty($node->basic['sell']) ? $product->price : $node->basic['sell'];
        $product->cost = $node->basic['cost'];
        $product->guid = $node->basic['guid'];
        $product->image = $node->image;
        $product->weight = $node->basic['weight'];
        $product->amount = $node->basic['amount'];
        $product->unit = $node->basic['unit'];
        $product->publish = $node->basic['publish'] ? strtotime("{$node->basic['publish']}") : 0;
        $product->unpublish = $node->basic['unpublish'] ? strtotime("{$node->basic['unpublish']}") : 0;
        $product->startdate = $node->basic['startdate'] ? strtotime("{$node->basic['startdate']}") : 0;
        $product->enddate = $node->basic['enddate'] ? strtotime("{$node->basic['enddate']}") : 0;
        $product->shipable = $node->ship['shipable'];
        $product->shiptime = $node->ship['shiptime'];
        $product->shipweight = $node->ship['shipweight'];
        $product->shipprice = $node->ship['shipprice'];
        $product->shipmethod = $node->ship['shipmethod'];

        data::insertObject('{products}', $product);
        
        // TODO: Update {product_field}
    }
}

/**
 * Implementation of hook_delete().
 */
function nodextend_delete(&$node) {
    // TODO: Delete {products}
    db_query('DELETE FROM {products} WHERE nid = %d', $node->nid);
    // TODO: Delete {product_field}
}

/**
 * Implementation of hook_load().
 */
function nodextend_load($node) {
    // TODO: Load product basic fields from table {products}
    $products = db_fetch_object(db_query('SELECT * FROM {products} WHERE vid = %d', $node->vid));
    // TODO: Load product extra fields from table {product_field_data}
    return $products;
}

/**
 * Implementation of hook_view().
 */
function nodextend_view($node, $teaser = FALSE, $page = FALSE) {
    // TODO: Insert additional code (call to theme functions, etc.) to execute when viewing a node, for example:
    // $node = node_prepare($node, $teaser);
    // $node->content['myfield'] = array(
    //   '#value' => theme('node_example_order_info', $node),
    //   '#weight' => 1,
    // );

    return $node;
}

/**
 * Implementation of hook_nodeapi().
 *
 * We will implement several node API operations here. This hook allows us to
 * act on all major node operations, so we can manage our additional data
 * appropriately.
 */
function nodextend_nodeapi(&$node, $op, $teaser, $page) {
    switch ($op) {
        case 'presave':
            // trace($node);
            // Add alias
            if(empty($node->alias)) {
                $node->alias = string::toAlias($node->title);
            }
            // Fix metadata
            $meta = $node->meta;
            $data = new stdClass();
            $data->author = $meta['author'];
            $data->robots = $meta['robots'];
            $node->metadesc = isset($meta['desc']) ? $meta['desc'] : $node->title;
            $node->metakey = isset($meta['keywords']) ? $meta['keyword'] : 'tag, keyword, ' . $node->title;
            $node->metadata = serialize($data);
            unset($node->meta);
            break;
    }
}

/**
 * Implementation of hook_theme().
 */
function nodextend_theme($existing, $type, $theme, $path) {
    return array(
        'node_form' => array(
            'template' => 'node',
        ),
    );
}

/**
 * @todo Dinh nghia cac region cua node form ho tro node layout
 */
function nodextend_form_regions() {
    return array(
        'top' => t('Top column'),
        'main' => t('Main column'),
        'right' => t('Right'),
        'footer' => t('Footer'),
    );
}

/**
 * Preprocess function to run ahead of other modules.
 */
function template_preprocess_node_form(&$vars) {
    drupal_add_css(drupal_get_path('module', 'nodextend') . '/styles/form.css');
   
    $form = &$vars['form'];
    $class = array('node-form');
    $default_region = 'main';
}